---
# example recipe
# --- !Recipe
!Recipe
name: !!str "example_recipe"

evaluation: !Evaluation
  # this defines the tags that can be added as columns to a DataFrame, primarily
  # for use as a primary composite key over the extracted data in the DataFrame
  tags:
    attributes:
      # these tags are extracted from the `runAttr` table
      narf: |
        [{
          'regex': r'nope.*'
          , 'transform': lambda v: str(v)
        }]
    iterationvars:
      # these tags are extracted from the `iterationvars` entry in the `runAttr` table
      sensors: |
        [{
              'regex': r'\$sensorConf=.*?,'
            , 'transform': lambda v: str(v).strip(',').split('=')[1]
        }]
      hour: |
        [{
            'regex': r'\$sumocfgname=[0-9]+,'
          , 'transform': lambda v: int(str(v).strip(',').split('=')[1])
        }]
    parameters:
      # these tags are extracted from the `runParam` table
      zorch: |
        [{
          'regex': r'nope.*'
          , 'transform': lambda v: str(v)
        }]


  extractors:
    - cbr: !RawExtractor
        # the path to the input files, regular expressions can be used
        input_files: !!python/list
          - "/opt/tmpssd/data/ffk/.*MPR=(0.2|0.4).*mcmI=1.0.*vec"
        signal: "Recv_cbr:vector"
        alias: "cbr"
        categorical_columns: ['variable']
        categorical_columns_excluded: ['cbr']
        # the base set of tags to add (here common_sets.BASE_TAGS_EXTRACTION_MINIMAL is
        # given as an example)
        base_tags: [ 'v2x_rate', 'moduleName', 'repetition', 'simtimeRaw', 'eventNumber', 'configname', 'experiment', 'prefix', 'runnumber', 'sumocfgname' ]
        # the additional tags to add in addition to the base set
        additional_tags: [ 'sensors', 'hour' ]
        # only add the minimal (plus the `additional_tags`) set of tags
        # (common_sets.BASE_TAGS_EXTRACTION_MINIMAL) to the output DataFrame
        # (default true)
        minimal_tags: !!bool "true"

  transforms:
    - cuiTransform: !GroupedFunctionTransform
        # the key for the data loaded by the extractor above
        dataset_name: "cbr"
        # the key for the generated data
        output_dataset_name: "cui"
        # the column with the input data
        input_column: "cbr"
        output_column: "cui"
        # the categorical variable used for splitting the input data into groups
        # over which the mean will be calculated
        grouping_columns: [ "v2x_rate", "moduleName" ]

        # this is auxiliary code that can be used for defining more complex aggregation functions
        # the evaluation of this code is contained to only a copy of the environment which is then used as context when evaluating 'aggregation_function'
        extra_code: |
          def calculate_cui(df):
              diffs = df['simtimeRaw'].sort_values().diff().dropna()
              # print(df)
              # print(diffs)
              return diffs.mean()

        # the function to execute for each group
        # this should accept a pandas.Series as parameter and return a single value (when not outputting in raw mode)
        # aggregation_function: "dask.dataframe.groupby.DataFrameGroupBy.mean"
        # aggregation_function: "pd.Series.mean"
        transform_function: "calculate_cui"

        # whether to treat the result of the transform function as a single value (and augment it with the first row of the group data)
        # or as a pandas.Series (and assign it as a new column)
        aggregate: !true

        # whether to output a list of the raw result from the aggregation
        # function or add the result as a new column to to the first row of the
        # input data (the input column having been removed beforehand)
        # raw: !!bool "false"
        raw: !false


  exporter:
    - cui: !FileResultProcessor
        dataset_name: "cui" # the key for the data loaded by the extractor above
        # whether to concatenate all input results into one file
        concatenate: !!bool "true"
        # output_filename: "/opt/tmpssd/t-its-paper/extracted/tmp/cui.feather"
        output_filename: "/home/artery/t-its-paper/extracted/cui.feather"


plot: !Plot
  reader: # !!python/list
    - cui: !PlottingReaderFeather
        input_files: !!python/list
          - "/home/artery/t-its-paper/extracted/0_itsg5_FFK_SCO_8h_MPR=.*_mcmI=1.0_mcmL=888_20220531-03.*.feather"

  tasks: # !!python/list
    - cui: !PlottingTask
        # the key used for selecting from the data loaded and/or transformed in
        # the reader and transform phases
        dataset_name: "cui"
        # dataset_name: "cbr_stats"
        # selector: "prefix == 'itsg5_FFK_SCO' and repetition=='0' and v2x_rate==1.0"
        # the kind of plot to draw
        # one of { 'lineplot', 'box', 'scatterplot'
        #        , 'boxen', 'stripplot', 'swarm', 'bar', 'count'
        #        , 'point'
        #        , ... }
        # plot_type: "box"
        plot_type: "lineplot"

        x: "v2x_rate"
        y: "cui"

        # yrange: "(0., 0.8)"

        # x: "v2x_rate"
        # y: "cbr"
        # y: "cbr_mean"
        # y: "mean"
        # y: "50%"

        # x: !!null
        # y: "cbr"

        # hue: "moduleName"
        # hue: "repetition"
        hue: "repetition"
        # hue: !!null
        row: "prefix"
        # row: "moduleName"
        # row: !!null
        # column: "v2x_rate"
        # column: "prefix"
        column: "experiment"
        # column: "moduleName"
        # column: !!null
        #
        alpha: 0.9

        xlabel: "MPR"
        ylabel: "CBR"

        # default row/column title template
        title_template: !!null
        # title_template: ""

        # no legend title
        # legend_title: ""
        # legend_title: !!null
        # custom legend title
        legend_title: "Repetition"
        # the location of the legend
        legend_location: "center right"
        legend: !!null

        axes_style: "dark"
        bbox_inches: "tight"

        # colormap: "plasma"

        matplotlib_backend: "agg"
        matplotlib_rc: !null
        output_file: "/opt/tmpssd/t-its-paper/plots_new/cbr_m.png"

...
