---
# example recipe
# --- !Recipe
!Recipe
name: !!str "example_recipe"

evaluation: !Evaluation
  # this defines the tags that can be added as columns to a DataFrame, primarily
  # for use as a primary composite key over the extracted data in the DataFrame
  tags:
    attributes:
      # these tags are extracted from the `runAttr` table
      narf: |
        [{
          'regex': r'nope.*'
          , 'transform': lambda v: str(v)
        }]
    iterationvars:
      # these tags are extracted from the `iterationvars` entry in the `runAttr` table
      sensors: |
        [{
              'regex': r'\$sensorConf=.*?,'
            , 'transform': lambda v: str(v).strip(',').split('=')[1]
        }]
    parameters:
      # these tags are extracted from the `runParam` table
      zorch: |
        [{
          'regex': r'nope.*'
          , 'transform': lambda v: str(v)
        }]


  extractors:
    pos: !PositionExtractor
      # This extracts the values for a signal with the associated position data
      #
      # the path to the input files, regular expressions can be used
      input_files: !!python/list
        - "/opt/tmpssd/t-its-paper/ffk/.*mcmI=1.0.*vec"
      # the signal containing the x position data
      x_signal: "Recv_positionX:vector"
      # the column name used for the x position data
      x_alias: "posX"
      # the signal containing the y position data
      y_signal: "Recv_positionY:vector"
      # the column name used for the y position data
      y_alias: "posY"
      # the signal containing the actual data
      signal: "Recv_cbr:vector"
      # the column name used for the signal data
      alias: "cbr"
      # the rectangle to restrict the data to
      # format: (x_min, y_min, x_max, y_max)
      restriction: "(5000, 3000, 5500, 3500)"
      simtimeRaw: !!bool "true"
      moduleName: !!bool "true"
      eventNumber: !!bool "true"

    cbr: !RawExtractor
      # the path to the input files, regular expressions can be used
      input_files: !!python/list
        - "/opt/tmpssd/t-its-paper/ffk/.*mcmI=1.0.*vec"
        # - "/home/artery/t-its-paper/ffk/.*MPR=0.1.*vec"
        # - "/home/artery/t-its-paper/ffk/.*MPR=(0.2|0.4).*vec"
        # - "/home/artery/example/data/.*44.vec"
      # signal: "cbr_ch_180:vector"
      signal: "Sent_cbr:vector"
      alias: "cbr"
      categorical_columns: ['variable']
      categorical_columns_excluded: ['cbr']
      # the base set of tags to add (here common_sets.BASE_TAGS_EXTRACTION_MINIMAL is
      # given as an example)
      base_tags: [ 'v2x_rate', 'moduleName', 'repetition', 'simtimeRaw', 'eventNumber', 'configname', 'experiment', 'prefix', 'runnumber', 'sumocfgname' ]
      # the additional tags to add in addition to the base set
      additional_tags: [ 'sensors' ]
      # only add the minimal (plus the `additional_tags`) set of tags
      # (common_sets.BASE_TAGS_EXTRACTION_MINIMAL) to the output DataFrame
      # (default true)
      minimal_tags: !!bool "true"

    pdr: !MatchingExtractor
      # the path to the input files, regular expressions can be used
      input_files: !!python/list
        - "/opt/tmpssd/t-its-paper/ffk/.*MPR=(0.2|0.4).*mcmI=1.0.*vec$"
      # the pattern used for matching on the `vectorName` column
      # note the binding of the variable `index` to the distance coded into the
      # signal name
      pattern: "PdrDistance_(?P<index>[0-9]{1,2}):vector"
      # the pattern used in naming each extracted signal
      # this is placed into the `variable` column
      alias_pattern: "pdr_{index}"
      alias: "pdr"
      categorical_columns: ['variable']
      categorical_columns_excluded: ['value']
      simtimeRaw: !!bool "true"
      moduleName: !!bool "true"
      eventNumber: !!bool "true"


  transforms:
    meanTransform: !GroupedAggregationTransform
      # the key for the data loaded by the extractor above
      dataset_name: "cbr"
      # the key for the generated data
      output_dataset_name: "cbr_mean"
      # the column with the input data
      input_column: "cbr"
      output_column: "cbr_mean"
      # the categorical variable used for splitting the input data into groups
      # over which the mean will be calculated
      grouping_columns: [ "v2x_rate", "moduleName" ]
      # aggregation_function: "dask.dataframe.groupby.DataFrameGroupBy.mean"
      aggregation_function: "pd.Series.mean"


  exporter:
    pdr: !FileResultProcessor
      dataset_name: "pdr" # the key for the data loaded by the extractor above
      # whether to concatenate all input results into one file
      concatenate: !!bool "false"
      # the output file name in case of concatenation
      output_filename: "/opt/tmpssd/t-its-paper/extracted/tmp/pdr_mcmI=1.0.feather"

    # pdr_mean: !FileResultProcessor
    #   dataset_name: "pdr" # the key for the data loaded by the extractor above
    #   # whether to concatenate all input results into one file
    #   concatenate: !!bool "false"
    #   # the output file name in case of concatenation
    #   output_filename: "/opt/tmpssd/t-its-paper/extracted/tmp/pdr_mcmI=1.0.feather"


    cbr: !FileResultProcessor
      dataset_name: "cbr" # the key for the data loaded by the extractor above
      # output_directory: "/home/artery/t-its-paper/extracted"
      # output_directory: "/home/artery/example/extracted"
      # output_filename: "/home/artery/t-its-paper/extracted/cbr.feather"
      # whether to concatenate all input results into one file
      concatenate: !!bool "true"
      output_filename: "/opt/tmpssd/t-its-paper/extracted/tmp/cbr_mcmI=1.0.feather"

    # cbr_mean: !FileResultProcessor
    #   dataset_name: "cbr_mean" # the key for the data loaded by the extractor above
    #   output_directory: "/home/artery/t-its-paper/extracted"
    #   # output_directory: "/home/artery/example/extracted"
    #   output_filename: "cbr_mean_per_module.feather"


plot: !Plot
  reader: # !!python/list
    cbr: !PlottingReaderFeather
      input_files: !!python/list
         - "/home/artery/t-its-paper/extracted/cbr.feather"
         # - "/home/artery/t-its-paper/extracted/.*feather"
         # - "/opt/tmpssd/proj/results/.*(feather|arrow)"

    # cbr_mean: !PlottingReaderFeather
    #   input_files: !!python/list
    #      - "/home/artery/t-its-paper/extracted/cbr_mean_per_module.feather"

  transforms:
    100msTransform: !FunctionTransform
      # the key for the data loaded by the reader above
      dataset_name: "cbr"
      # the key for the generated data
      output_dataset_name: "cbr_100ms"
      # the column with the input data
      input_column: "simtimeRaw"
      # the column the output data will be placed in
      output_column: "simtimeRaw_100ms"
      # the function to apply to the data in the input column of the data
      function: |
        lambda x: int(x / 1e11) / 10.

    # statsTransform: !GroupedStatisticsTransform
    #   params: [] # syntactically needed
    #   # the key for the data loaded by the extractor above
    #   dataset_name: "cbr"
    #   # the key for the generated data
    #   output_dataset_name: "cbr_stats"
    #   # the column with the input data
    #   input_column: "cbr"
    #   output_column: "cbr_stats"
    #   # the categorical variable used for splitting the input data into groups
    #   # over which the mean will be calculated
    #   grouping_columns: [ "moduleName", "v2x_rate" ]

    # meanTransform: !GroupedAggregationTransform
    #   # the key for the data loaded by the extractor above
    #   dataset_name: "cbr"
    #   # the key for the generated data
    #   output_dataset_name: "cbr_mean"
    #   # the column with the input data
    #   input_column: "cbr"
    #   output_column: "cbr_mean"
    #   # the categorical variable used for splitting the input data into groups
    #   # over which the mean will be calculated
    #   grouping_columns: [ "moduleName", "v2x_rate" ]
    #   # aggregation_function: "dask.dataframe.groupby.DataFrameGroupBy.mean"
    #   aggregation_function: "pd.Series.mean"

  tasks: # !!python/list
    cbr_raw: !PlottingTask
      # the key used for selecting from the data loaded and/or transformed in
      # the reader and transform phases
      dataset_name: "cbr"
      # dataset_name: "cbr_stats"
      selector: "prefix == 'itsg5_FFK_SCO'"
      # the kind of plot to draw
      # one of { 'lineplot', 'box', 'scatterplot'
      #        , 'boxen', 'stripplot', 'swarm', 'bar', 'count'
      #        , 'point'
      #        , ... }
      # plot_type: "box"
      plot_type: "lineplot"
      # plot_type: "scatterplot"
      # plot_type: "boxen"
      # plot_type: "stripplot"
      # plot_type: "swarm"
      # plot_type: "bar"
      # plot_type: "count"
      # plot_type: "point"

      # x: "simtimeRaw"
      # y: "cbr"

      x: "v2x_rate"
      y: "cbr"
      # y: "cbr_mean"
      # y: "mean"
      # y: "50%"

      # x: !!python/none
      # y: "cbr"

      hue: "moduleName"
      # hue: !!python/none
      # row: "prefix"
      # row: "moduleName"
      row: !!null
      # column: "v2x_rate"
      # column: "prefix"
      # column: "moduleName"
      column: !!null
      #
      alpha: 0.9

      xlabel: "MPR"
      ylabel: "CBR"

      # default row/column title template
      title_template: !!null
      # title_template: ""

      # no legend title
      # legend_title: ""
      # legend_title: !!python/none
      # custom legend title
      legend_title: "Measuring location"
      # the location of the legend
      legend_location: "center right"
      # legend_labels: [ "", "" ]

      axes_style: "dark"
      bbox_inches: "tight"

      matplotlib_backend: "agg"
      output_file: "/opt/tmpssd/t-its-paper/plots_new/cbr_line.png"

    cbr_box: !PlottingTask
      # the key used for selecting from the data loaded and/or transformed in
      # the reader and transform phases
      dataset_name: "cbr"
      # dataset_name: "cbr_stats"
      selector: "prefix == 'itsg5_FFK_SCO'"
      # the kind of plot to draw
      # one of { 'lineplot', 'box', 'scatterplot'
      #        , 'boxen', 'stripplot', 'swarm', 'bar', 'count'
      #        , 'point'
      #        , ... }
      plot_type: "box"
      # plot_type: "lineplot"
      # plot_type: "scatterplot"
      # plot_type: "boxen"
      # plot_type: "stripplot"
      # plot_type: "swarm"
      # plot_type: "bar"
      # plot_type: "count"
      # plot_type: "point"

      # x: "simtimeRaw"
      # y: "cbr"

      x: "v2x_rate"
      y: "cbr"
      # y: "cbr_mean"
      # y: "mean"
      # y: "50%"

      # x: !!python/none
      # y: "cbr"

      hue: "moduleName"
      # hue: !!python/none
      # row: "prefix"
      # row: "moduleName"
      row: !!null
      # column: "v2x_rate"
      # column: "prefix"
      # column: "moduleName"
      column: !!null
      #
      alpha: 0.9

      xlabel: "MPR"
      ylabel: "CBR"

      # default row/column title template
      title_template: !!null
      # title_template: ""

      # no legend title
      # legend_title: ""
      # legend_title: !!python/none
      # custom legend title
      legend_title: "Measuring location"
      # the location of the legend
      legend_location: "center right"

      axes_style: "ticks"
      context: "paper"
      bbox_inches: "tight"
      matplotlib_rc: "{
            'font.size':10,
            'axes.titlesize':10,
            'axes.linewidth':0.5,
            'xtick.major.width':0.5,
            'ytick.major.width':0.5,
            'text.usetex': True,
            'font.family': 'serif',
            'figure.dpi': 72,
            'figure.figsize': (8.268, 2.25)
            }"

      matplotlib_backend: "agg"
      output_file: "/opt/tmpssd/t-its-paper/plots_new/cbr_box.png"

    cbr_m: !PlottingTask
      # the key used for selecting from the data loaded and/or transformed in
      # the reader and transform phases
      dataset_name: "cbr_100ms"
      # dataset_name: "cbr_stats"
      selector: "prefix == 'itsg5_FFK_SCO' and repetition=='0' and v2x_rate==1.0"
      # the kind of plot to draw
      # one of { 'lineplot', 'box', 'scatterplot'
      #        , 'boxen', 'stripplot', 'swarm', 'bar', 'count'
      #        , 'point'
      #        , ... }
      # plot_type: "box"
      plot_type: "lineplot"
      # plot_type: "scatterplot"
      # plot_type: "boxen"
      # plot_type: "stripplot"
      # plot_type: "swarm"
      # plot_type: "bar"
      # plot_type: "count"
      # plot_type: "point"

      x: "simtimeRaw_100ms"
      y: "cbr"

      y_range: "(0., 0.8)"

      # x: "v2x_rate"
      # y: "cbr"
      # y: "cbr_mean"
      # y: "mean"
      # y: "50%"

      # x: !!python/none
      # y: "cbr"

      # hue: "moduleName"
      hue: "repetition"
      # hue: !!python/none
      # row: "prefix"
      # row: "moduleName"
      row: !!null
      # column: "v2x_rate"
      column: "prefix"
      # column: "moduleName"
      # column: !!python/none
      #
      alpha: 0.9

      xlabel: "MPR"
      ylabel: "CBR"

      # default row/column title template
      title_template: !!null
      # title_template: ""

      # no legend title
      # legend_title: ""
      # legend_title: !!python/none
      # custom legend title
      legend_title: "Measuring location"
      # the location of the legend
      legend_location: "center right"
      legend: !!null

      axes_style: "dark"
      bbox_inches: "tight"

      matplotlib_backend: "agg"
      output_file: "/opt/tmpssd/t-its-paper/plots_new/cbr_m.png"

    pdr: !PlottingTask
      dataset_name: "pdr"
      plot_type: "lineplot"

      x: "simtimeRaw"
      y: "value"

      hue: !!null
      row: !!null
      column: !!null

      alpha: 0.9

      xlabel: "simtime"
      ylabel: "PDR"

      # default row/column title template
      title_template: !!null

      legend: !!null

      axes_style: "dark"
      bbox_inches: "tight"

      matplotlib_backend: "agg"
      output_file: "/opt/tmpssd/t-its-paper/plots_new/pdr.png"

    cbr_heatmap: !PlottingTask
      dataset_name: "pos"
      selector: "moduleName.str.contains(r'World.node\\[5..\\].middleware.McService')"
      plot_type: "heat"

      x: "posX"
      y: "posY"
      z: "cbr"

      # column: 'v2x_rate'

      # yrange: (0, 0.8)
      # the side length of the square position bin
      bin_size: 25.

      legend: !!null
      # colormap: "gist_heat"
      colormap: "blend:white,#bb2323"

...
